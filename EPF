import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const EPFCalculator = () => {
  const [currentAge, setCurrentAge] = useState(25);
  const [retirementAge, setRetirementAge] = useState(65);
  const [currentSalary, setCurrentSalary] = useState(5000);
  const [currentEPF, setCurrentEPF] = useState(40000);
  const [salaryIncreaseRate, setSalaryIncreaseRate] = useState(1);
  const [interestRate, setInterestRate] = useState(5.75);
  const [calculationResults, setCalculationResults] = useState([]);
  const [totalEPFAt65, setTotalEPFAt65] = useState(0);

  const EPF_CONTRIBUTION_RATE = 0.24; // 24% 的EPF缴纳率

  useEffect(() => {
    calculateEPF();
  }, [currentAge, retirementAge, currentSalary, currentEPF, salaryIncreaseRate, interestRate]);

  const calculateEPF = () => {
    let results = [];
    let salary = currentSalary;
    let totalEPF = currentEPF;
    const years = retirementAge - currentAge;

    for (let year = 0; year < years; year++) {
      const yearlyIncome = salary * 12;
      const yearlyContribution = yearlyIncome * EPF_CONTRIBUTION_RATE;
      
      totalEPF += yearlyContribution;
      const yearlyInterest = totalEPF * (interestRate / 100);
      totalEPF += yearlyInterest;

      results.push({
        age: currentAge + year,
        yearlyContribution: Math.round(yearlyContribution),
        yearlyInterest: Math.round(yearlyInterest)
      });

      salary *= (1 + salaryIncreaseRate / 100);
    }

    setCalculationResults(results);
    setTotalEPFAt65(Math.round(totalEPF));
  };

  return (
    <Card className="w-full max-w-6xl mx-auto">
      <CardHeader>
        <CardTitle>EPF增长趋势图</CardTitle>
      </CardHeader>
      <CardContent>
        <style jsx>{`
          @keyframes emphasize {
            0% { color: #ff4136; }
            25% { color: #ff851b; }
            50% { color: #2ecc40; }
            75% { color: #0074d9; }
            100% { color: #b10dc9; }
          }
          .emphasize {
            animation: emphasize 5s infinite;
            font-weight: bold;
          }
        `}</style>
        <div className="grid grid-cols-3 gap-4 mb-4">
          <div>
            <Label htmlFor="currentAge">当前年龄</Label>
            <Input
              id="currentAge"
              type="number"
              value={currentAge}
              onChange={(e) => setCurrentAge(Number(e.target.value))}
            />
          </div>
          <div>
            <Label htmlFor="retirementAge">退休年龄</Label>
            <Input
              id="retirementAge"
              type="number"
              value={retirementAge}
              onChange={(e) => setRetirementAge(Number(e.target.value))}
            />
          </div>
          <div>
            <Label htmlFor="currentSalary">当前月薪</Label>
            <Input
              id="currentSalary"
              type="number"
              value={currentSalary}
              onChange={(e) => setCurrentSalary(Number(e.target.value))}
            />
          </div>
          <div>
            <Label htmlFor="currentEPF">当前EPF余额</Label>
            <Input
              id="currentEPF"
              type="number"
              value={currentEPF}
              onChange={(e) => setCurrentEPF(Number(e.target.value))}
            />
          </div>
          <div>
            <Label htmlFor="salaryIncreaseRate">年度薪资增长率 (%)</Label>
            <Input
              id="salaryIncreaseRate"
              type="number"
              value={salaryIncreaseRate}
              onChange={(e) => setSalaryIncreaseRate(Number(e.target.value))}
            />
          </div>
          <div>
            <Label htmlFor="interestRate">EPF年利率 (%)</Label>
            <Input
              id="interestRate"
              type="number"
              value={interestRate}
              onChange={(e) => setInterestRate(Number(e.target.value))}
            />
          </div>
        </div>
        
        <div className="mt-4 text-center text-xl">
          65岁时累计EPF总额: <span className="emphasize">RM {totalEPFAt65.toLocaleString()}</span>
        </div>
        
        <div className="mt-4" style={{height: '400px'}}>
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={calculationResults}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="age" label={{ value: '年龄', position: 'bottom', offset: 0 }} />
              <YAxis label={{ value: '金额 (RM)', angle: -90, position: 'insideLeft' }} />
              <Tooltip formatter={(value) => `RM ${value.toLocaleString()}`} />
              <Legend />
              <Line type="monotone" dataKey="yearlyContribution" name="年缴款" stroke="#82ca9d" />
              <Line type="monotone" dataKey="yearlyInterest" name="年利息" stroke="#8884d8" />
            </LineChart>
          </ResponsiveContainer>
        </div>

        <div className="mt-8 overflow-x-auto">
          <table className="min-w-full bg-white border border-gray-300">
            <thead>
              <tr className="bg-gray-100">
                <th className="px-4 py-2 border">年龄</th>
                <th className="px-4 py-2 border">年EPF缴款</th>
                <th className="px-4 py-2 border">年利息</th>
              </tr>
            </thead>
            <tbody>
              {calculationResults.map((result, index) => (
                <tr key={index} className={index % 2 === 0 ? 'bg-gray-50' : 'bg-white'}>
                  <td className="px-4 py-2 border">{result.age}</td>
                  <td className="px-4 py-2 border">RM {result.yearlyContribution.toLocaleString()}</td>
                  <td className="px-4 py-2 border">RM {result.yearlyInterest.toLocaleString()}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </CardContent>
    </Card>
  );
};

export default EPFCalculator;
